create or replace view IM_VAULT.BDV.FUND_GROUP_SAT(
	FUND_GROUP_HKEY,
	FROM_DATE,
	TO_DATE,
	FUND_GROUP_NAME,
	FUND_GROUP_NAME_SHORT,
	SJP_FUND_ID,
	LOAD_DATETIME
) COMMENT='No Comment Provided'
 as
(
   -- Please type View Definition here
 WITH FGSAT AS (SELECT FGSAT.*
               FROM "IM_VAULT"."RDV"."FUND_GROUP_SAT" FGSAT
               INNER JOIN (SELECT FUND_GROUP_HKEY, BUS_DATE, LAST_VALUE(LOAD_DATETIME) 
                           OVER (PARTITION BY FUND_GROUP_HKEY, BUS_DATE ORDER BY LOAD_DATETIME) AS LOAD_DATETIME
               FROM "IM_VAULT"."RDV"."FUND_GROUP_SAT") A
               ON FGSAT.FUND_GROUP_HKEY = A.FUND_GROUP_HKEY
               AND FGSAT.BUS_DATE = A.BUS_DATE
               AND FGSAT.LOAD_DATETIME = A.LOAD_DATETIME
)
, FUND_GROUP AS (               
SELECT FGSAT.FUND_GROUP_HKEY
      ,TRY_TO_DATE(FGSAT.BUS_DATE::VARCHAR,'DD/MM/YYYY') AS FROM_DATE
      ,IFNULL(TRY_TO_DATE(lag(bus_date) OVER (PARTITION BY FGSAT.FUND_GROUP_HKEY ORDER BY FGSAT.BUS_DATE DESC)::VARCHAR,'DD/MM/YYYY'),'9999-12-31') AS TO_DATE
      ,CAST(FGSAT.FUND_GROUP_NAME AS VARCHAR(500)) AS FUND_GROUP_NAME
      ,CAST(FGSAT.FUND_GROUP_NAME_SHORT AS VARCHAR(500)) AS FUND_GROUP_NAME_SHORT
      ,TRY_TO_BOOLEAN(FGSAT.SJP_FUND_IND) AS SJP_FUND_IND
      ,FGSAT.LOAD_DATETIME
FROM FGSAT
)
, OVR_RECORDS AS (
    SELECT *
    FROM (
        SELECT TRIM(OL.H_KEY) AS "H_KEY",
               TRIM(OL.BUSINESS_DATE) AS "BUSINESS_DATE",
               TRIM(OL.ATTRIBUTE_NAME) AS "ATTRIBUTE_NAME",
               OL.ATTRIBUTE_VALUE,
               TRIM(OL.LOAD_DATETIME) AS "LOAD_DATETIME",
               ROW_NUMBER() OVER (PARTITION BY OL.H_KEY, OL.BUSINESS_DATE, OL.ATTRIBUTE_NAME
                                  ORDER BY OL.LOAD_DATETIME DESC) AS "DECLARED_RANK"
        FROM IM_VAULT.REFERENCE.OVERRIDE_LOOKUP OL)
    WHERE "DECLARED_RANK" = '1'
)
SELECT  FG.FUND_GROUP_HKEY
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FROM_DATE'
                       THEN OL.ATTRIBUTE_VALUE END), FG.FROM_DATE
                  ) AS "FROM_DATE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'TO_DATE'
                       THEN OL.ATTRIBUTE_VALUE END), FG.TO_DATE
                  ) AS "TO_DATE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_GROUP_NAME'
                       THEN OL.ATTRIBUTE_VALUE END), FG.FUND_GROUP_NAME
                  ) AS "FUND_GROUP_NAME"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_GROUP_NAME_SHORT'
                       THEN OL.ATTRIBUTE_VALUE END), FG.FUND_GROUP_NAME_SHORT
                  ) AS "FUND_GROUP_NAME_SHORT"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'SJP_FUND_ID'
                       THEN OL.ATTRIBUTE_VALUE END), FG.SJP_FUND_IND
                  ) AS "SJP_FUND_ID"
        , FG.LOAD_DATETIME
FROM FUND_GROUP FG
LEFT JOIN OVR_RECORDS OL ON OL.H_KEY = FG.FUND_GROUP_HKEY AND
                            (OL.BUSINESS_DATE = FG.TO_DATE OR OL.BUSINESS_DATE = FG.FROM_DATE) AND
                            OL.ATTRIBUTE_NAME IN ('FROM_DATE'
                                                  , 'TO_DATE'
                                                  , 'FUND_GROUP_NAME'
                                                  , 'FUND_GROUP_NAME_SHORT'
                                                  , 'SJP_FUND_ID') AND
                                                  OL.LOAD_DATETIME > FG.LOAD_DATETIME
GROUP BY FG.FUND_GROUP_HKEY
         , FG.FROM_DATE
         , FG.TO_DATE
         , FG.FUND_GROUP_NAME
         , FG.FUND_GROUP_NAME_SHORT
         , FG.SJP_FUND_IND
         , FG.LOAD_DATETIME
);
create or replace view IM_VAULT.BDV.FUND_SAT(
	FUND_HKEY,
	FUND_BKEY,
	FUND_ID,
	FUND_NAME,
	FUND_NAME_SHORT,
	FUND_ISSUE_GROUP_SHORT,
	GROUP_SUBTYPE,
	STATESTREET_ACCOUNT_ID,
	FUND_TIN,
	FUND_GIIN,
	ACCOUNT_STRUCTURE,
	MANAGER_STRUCTURE,
	FUND_TYPE,
	FUND_STRUCTURE,
	DISTRIBUTION_TYPE,
	CIS_TYPE,
	REGULATORY_STATUS,
	AUTHORISED_FUND_TYPE,
	UCITS_VERSION,
	PURCHASE_SETTLEMENT_DAYS,
	REPURCHASE_SETTLEMENT_DAYS,
	DEALING_FREQUENCY,
	PRICING_FREQUENCY,
	VALUATION_TIME,
	FUND_DOMICILE,
	FUND_OBJECTIVE,
	BENEFICIAL_OWNER,
	ISSUING_GROUP,
	ISSUING_GROUP_ADDRESS,
	ISSUING_GROUP_POSTCODE,
	ISSUING_GROUP_PHONE_NUMBER,
	ISSUING_GROUP_WEBSITE,
	ISSUING_GROUP_LEI,
	TRUSTEE,
	TRUSTEE_LEI,
	CUSTODIAN,
	CUSTODIAN_LEI,
	CUSTODIAN_DOMICILE,
	REGISTERED_HOLDER,
	REGISTERED_HOLDER_ADDRESS,
	ADMINISTRATOR,
	ADMINISTRATOR_LEI,
	ADMINISTRATOR_DOMICILE,
	AUDITOR,
	AUDITOR_LEI,
	AUDITOR_DOMICILE,
	LOAD_DATETIME
) COMMENT='No Comment Provided'
 as
(
WITH FUND_SAT AS(
SELECT   TO_VARCHAR(FUND_HKEY) AS FUND_HKEY
        ,TO_VARCHAR(FUND_BKEY) AS FUND_BKEY
        ,TO_VARCHAR(FUND_KEY) AS FUND_ID
        ,TO_VARCHAR(FUND_NAME) AS FUND_NAME
        ,TO_VARCHAR(FUND_NAME_SHORT) AS FUND_NAME_SHORT
        ,TO_VARCHAR(FUND_ISSUE_GROUP_SHORT) AS FUND_ISSUE_GROUP_SHORT
        ,TO_VARCHAR(GROUP_SUBTYPE) AS GROUP_SUBTYPE 
        ,TO_VARCHAR(STATESTREET_ACCOUNT_ID) AS STATESTREET_ACCOUNT_ID
        ,TO_VARCHAR(FUND_TIN) AS FUND_TIN
        ,TO_VARCHAR(FUND_GIIN) AS FUND_GIIN
        ,TO_VARCHAR(ACCOUNT_STRUCTURE) AS ACCOUNT_STRUCTURE
        ,TO_VARCHAR(MANAGER_STRUCTURE) AS MANAGER_STRUCTURE
        ,TO_VARCHAR(FUND_TYPE) AS FUND_TYPE
        ,TO_VARCHAR(FUND_STRUCTURE) AS FUND_STRUCTURE
        ,TO_VARCHAR(DISTRIBUTION_TYPE) AS DISTRIBUTION_TYPE
        ,TO_VARCHAR(CIS_TYPE) AS CIS_TYPE
        ,TO_VARCHAR(REGULATORY_STATUS) AS REGULATORY_STATUS
        ,TO_VARCHAR(AUTHORISED_FUND_TYPE) AS AUTHORISED_FUND_TYPE
        ,CASE WHEN UCITS_VERSION = '' THEN NULL ELSE TO_NUMERIC(UCITS_VERSION) END AS UCITS_VERSION
        ,CASE WHEN PURCHASE_SETTLEMENT_DAYS = '' THEN NULL ELSE TO_NUMERIC(PURCHASE_SETTLEMENT_DAYS) END AS PURCHASE_SETTLEMENT_DAYS
        ,CASE WHEN REPURCHASE_SETTLEMENT_DAYS ='' THEN NULL ELSE TO_NUMERIC(REPURCHASE_SETTLEMENT_DAYS) END AS REPURCHASE_SETTLEMENT_DAYS
        ,TO_VARCHAR(DEALING_FREQUENCY) AS DEALING_FREQUENCY
        ,TO_VARCHAR(PRICING_FREQUENCY) AS PRICING_FREQUENCY
        ,CASE WHEN VALUATION_TIME = '' THEN NULL ELSE TO_TIME(VALUATION_TIME) END AS VALUATION_TIME
        ,TO_VARCHAR(FUND_DOMICILE) AS FUND_DOMICILE
        ,TO_VARCHAR(FUND_OBJECTIVE) AS FUND_OBJECTIVE
        ,TO_VARCHAR(BENEFICIAL_OWNER) AS BENEFICIAL_OWNER
        ,TO_VARCHAR(ISSUING_GROUP) AS ISSUING_GROUP
        ,TO_VARCHAR(ISSUING_GROUP_ADDRESS) AS ISSUING_GROUP_ADDRESS
        ,TO_VARCHAR(ISSUING_GROUP_POSTCODE) AS ISSUING_GROUP_POSTCODE
        ,TO_VARCHAR(ISSUING_GROUP_PHONE_NUMBER) AS ISSUING_GROUP_PHONE_NUMBER
        ,TO_VARCHAR(ISSUING_GROUP_WEBSITE) AS ISSUING_GROUP_WEBSITE
        ,TO_VARCHAR(ISSUING_GROUP_LEI) AS ISSUING_GROUP_LEI
        ,TO_VARCHAR(TRUSTEE) AS TRUSTEE
        ,TO_VARCHAR(TRUSTEE_LEI) AS TRUSTEE_LEI
        ,TO_VARCHAR(CUSTODIAN) AS CUSTODIAN
        ,TO_VARCHAR(CUSTODIAN_LEI) AS CUSTODIAN_LEI
        ,TO_VARCHAR(CUSTODIAN_DOMICILE) AS CUSTODIAN_DOMICILE
        ,TO_VARCHAR(REGISTERED_HOLDER) AS REGISTERED_HOLDER
        ,TO_VARCHAR(REGISTERED_HOLDER_ADDRESS) AS REGISTERED_HOLDER_ADDRESS
        ,TO_VARCHAR(ADMINISTRATOR) AS ADMINISTRATOR
        ,TO_VARCHAR(ADMINISTRATOR_LEI) AS ADMINISTRATOR_LEI
        ,TO_VARCHAR(ADMINISTRATOR_DOMICILE) AS ADMINISTRATOR_DOMICILE 
        ,TO_VARCHAR(AUDITOR) AS AUDITOR
        ,TO_VARCHAR(AUDITOR_LEI) AS AUDITOR_LEI
        ,TO_VARCHAR(AUDITOR_DOMICILE) AS AUDITOR_DOMICILE
        ,LOAD_DATETIME 
FROM "IM_VAULT"."RDV"."FUND_SAT"
)
, OVR_RECORDS AS (
    SELECT *
    FROM (
        SELECT TRIM(OL.H_KEY) AS "H_KEY",
               TRIM(OL.BUSINESS_DATE) AS "BUSINESS_DATE",
               TRIM(OL.ATTRIBUTE_NAME) AS "ATTRIBUTE_NAME",
               OL.ATTRIBUTE_VALUE,
               TRIM(OL.LOAD_DATETIME) AS "LOAD_DATETIME",
               ROW_NUMBER() OVER (PARTITION BY OL.H_KEY, OL.BUSINESS_DATE, OL.ATTRIBUTE_NAME
                                  ORDER BY OL.LOAD_DATETIME DESC) AS "DECLARED_RANK"
        FROM IM_VAULT.REFERENCE.OVERRIDE_LOOKUP OL)
    WHERE "DECLARED_RANK" = '1'
)
SELECT  FS.FUND_HKEY
        , FS.FUND_BKEY
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_ID'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_ID
                  ) AS "FUND_ID"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_NAME'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_NAME
                  ) AS "FUND_NAME"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_NAME_SHORT'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_NAME_SHORT
                  ) AS "FUND_NAME_SHORT"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_ISSUE_GROUP_SHORT'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_ISSUE_GROUP_SHORT
                  ) AS "FUND_ISSUE_GROUP_SHORT"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'GROUP_SUBTYPE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.GROUP_SUBTYPE
                  ) AS "GROUP_SUBTYPE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'STATESTREET_ACCOUNT_ID'
                       THEN OL.ATTRIBUTE_VALUE END), FS.STATESTREET_ACCOUNT_ID
                  ) AS "STATESTREET_ACCOUNT_ID"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_TIN'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_TIN
                  ) AS "FUND_TIN"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_GIIN'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_GIIN
                  ) AS "FUND_GIIN"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ACCOUNT_STRUCTURE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ACCOUNT_STRUCTURE
                  ) AS "ACCOUNT_STRUCTURE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'MANAGER_STRUCTURE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.MANAGER_STRUCTURE
                  ) AS "MANAGER_STRUCTURE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_TYPE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_TYPE
                  ) AS "FUND_TYPE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_STRUCTURE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_STRUCTURE
                  ) AS "FUND_STRUCTURE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'DISTRIBUTION_TYPE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.DISTRIBUTION_TYPE
                  ) AS "DISTRIBUTION_TYPE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'CIS_TYPE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.CIS_TYPE
                  ) AS "CIS_TYPE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'REGULATORY_STATUS'
                       THEN OL.ATTRIBUTE_VALUE END), FS.REGULATORY_STATUS
                  ) AS "REGULATORY_STATUS"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'AUTHORISED_FUND_TYPE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.AUTHORISED_FUND_TYPE
                  ) AS "AUTHORISED_FUND_TYPE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'UCITS_VERSION'
                       THEN OL.ATTRIBUTE_VALUE END), FS.UCITS_VERSION
                  ) AS "UCITS_VERSION"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'PURCHASE_SETTLEMENT_DAYS'
                       THEN OL.ATTRIBUTE_VALUE END), FS.PURCHASE_SETTLEMENT_DAYS
                  ) AS "PURCHASE_SETTLEMENT_DAYS"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'REPURCHASE_SETTLEMENT_DAYS'
                       THEN OL.ATTRIBUTE_VALUE END), FS.REPURCHASE_SETTLEMENT_DAYS
                  ) AS "REPURCHASE_SETTLEMENT_DAYS"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'DEALING_FREQUENCY'
                       THEN OL.ATTRIBUTE_VALUE END), FS.DEALING_FREQUENCY
                  ) AS "DEALING_FREQUENCY"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'PRICING_FREQUENCY'
                       THEN OL.ATTRIBUTE_VALUE END), FS.PRICING_FREQUENCY
                  ) AS "PRICING_FREQUENCY"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'VALUATION_TIME'
                       THEN OL.ATTRIBUTE_VALUE END), FS.VALUATION_TIME
                  ) AS "VALUATION_TIME"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_DOMICILE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_DOMICILE
                  ) AS "FUND_DOMICILE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_OBJECTIVE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.FUND_OBJECTIVE
                  ) AS "FUND_OBJECTIVE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'BENEFICIAL_OWNER'
                       THEN OL.ATTRIBUTE_VALUE END), FS.BENEFICIAL_OWNER
                  ) AS "BENEFICIAL_OWNER"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ISSUING_GROUP'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ISSUING_GROUP
                  ) AS "ISSUING_GROUP"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ISSUING_GROUP_ADDRESS'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ISSUING_GROUP_ADDRESS
                  ) AS "ISSUING_GROUP_ADDRESS"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ISSUING_GROUP_POSTCODE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ISSUING_GROUP_POSTCODE
                  ) AS "ISSUING_GROUP_POSTCODE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ISSUING_GROUP_PHONE_NUMBER'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ISSUING_GROUP_PHONE_NUMBER
                  ) AS "ISSUING_GROUP_PHONE_NUMBER"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ISSUING_GROUP_WEBSITE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ISSUING_GROUP_WEBSITE
                  ) AS "ISSUING_GROUP_WEBSITE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ISSUING_GROUP_LEI'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ISSUING_GROUP_LEI
                  ) AS "ISSUING_GROUP_LEI"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'TRUSTEE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.TRUSTEE
                  ) AS "TRUSTEE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'TRUSTEE_LEI'
                       THEN OL.ATTRIBUTE_VALUE END), FS.TRUSTEE_LEI
                  ) AS "TRUSTEE_LEI"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'CUSTODIAN'
                       THEN OL.ATTRIBUTE_VALUE END), FS.CUSTODIAN
                  ) AS "CUSTODIAN"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'CUSTODIAN_LEI'
                       THEN OL.ATTRIBUTE_VALUE END), FS.CUSTODIAN_LEI
                  ) AS "CUSTODIAN_LEI"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'CUSTODIAN_DOMICILE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.CUSTODIAN_DOMICILE
                  ) AS "CUSTODIAN_DOMICILE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'REGISTERED_HOLDER'
                       THEN OL.ATTRIBUTE_VALUE END), FS.REGISTERED_HOLDER
                  ) AS "REGISTERED_HOLDER"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'REGISTERED_HOLDER_ADDRESS'
                       THEN OL.ATTRIBUTE_VALUE END), FS.REGISTERED_HOLDER_ADDRESS
                  ) AS "REGISTERED_HOLDER_ADDRESS"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ADMINISTRATOR'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ADMINISTRATOR
                  ) AS "ADMINISTRATOR"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ADMINISTRATOR_LEI'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ADMINISTRATOR_LEI
                  ) AS "ADMINISTRATOR_LEI"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'ADMINISTRATOR_DOMICILE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.ADMINISTRATOR_DOMICILE
                  ) AS "ADMINISTRATOR_DOMICILE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'AUDITOR'
                       THEN OL.ATTRIBUTE_VALUE END), FS.AUDITOR
                  ) AS "AUDITOR"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'AUDITOR_LEI'
                       THEN OL.ATTRIBUTE_VALUE END), FS.AUDITOR_LEI
                  ) AS "AUDITOR_LEI"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'AUDITOR_DOMICILE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.AUDITOR_DOMICILE
                  ) AS "AUDITOR_DOMICILE"
        , FS.LOAD_DATETIME
FROM FUND_SAT FS
LEFT JOIN OVR_RECORDS OL ON OL.H_KEY = FS.FUND_HKEY AND
                            OL.ATTRIBUTE_NAME IN ('FUND_ID'
	                                              , 'FUND_NAME'
	                                              , 'FUND_NAME_SHORT'
	                                              , 'FUND_ISSUE_GROUP_SHORT'
	                                              , 'GROUP_SUBTYPE'
	                                              , 'STATESTREET_ACCOUNT_ID'
	                                              , 'FUND_TIN'
	                                              , 'FUND_GIIN'
	                                              , 'ACCOUNT_STRUCTURE'
	                                              , 'MANAGER_STRUCTURE'
	                                              , 'FUND_TYPE'
	                                              , 'FUND_STRUCTURE'
	                                              , 'DISTRIBUTION_TYPE'
	                                              , 'CIS_TYPE'
	                                              , 'REGULATORY_STATUS'
	                                              , 'AUTHORISED_FUND_TYPE'
	                                              , 'UCITS_VERSION'
	                                              , 'PURCHASE_SETTLEMENT_DAYS'
	                                              , 'REPURCHASE_SETTLEMENT_DAYS'
	                                              , 'DEALING_FREQUENCY'
	                                              , 'PRICING_FREQUENCY'
	                                              , 'VALUATION_TIME'
	                                              , 'FUND_DOMICILE'
	                                              , 'FUND_OBJECTIVE'
	                                              , 'BENEFICIAL_OWNER'
	                                              , 'ISSUING_GROUP'
	                                              , 'ISSUING_GROUP_ADDRESS'
	                                              , 'ISSUING_GROUP_POSTCODE'
	                                              , 'ISSUING_GROUP_PHONE_NUMBER'
	                                              , 'ISSUING_GROUP_WEBSITE'
	                                              , 'ISSUING_GROUP_LEI'
	                                              , 'TRUSTEE'
	                                              , 'TRUSTEE_LEI'
	                                              , 'CUSTODIAN'
	                                              , 'CUSTODIAN_LEI'
	                                              , 'CUSTODIAN_DOMICILE'
	                                              , 'REGISTERED_HOLDER'
	                                              , 'REGISTERED_HOLDER_ADDRESS'
	                                              , 'ADMINISTRATOR'
	                                              , 'ADMINISTRATOR_LEI'
	                                              , 'ADMINISTRATOR_DOMICILE'
	                                              , 'AUDITOR'
	                                              , 'AUDITOR_LEI'
	                                              , 'AUDITOR_DOMICILE') AND
                                                  OL.LOAD_DATETIME > FS.LOAD_DATETIME
GROUP BY FUND_HKEY
	     , FS.FUND_BKEY
	     , FS.FUND_ID
	     , FS.FUND_NAME
	     , FS.FUND_NAME_SHORT
	     , FS.FUND_ISSUE_GROUP_SHORT
	     , FS.GROUP_SUBTYPE
	     , FS.STATESTREET_ACCOUNT_ID
	     , FS.FUND_TIN
	     , FS.FUND_GIIN
	     , FS.ACCOUNT_STRUCTURE
	     , FS.MANAGER_STRUCTURE
	     , FS.FUND_TYPE
	     , FS.FUND_STRUCTURE
	     , FS.DISTRIBUTION_TYPE
	     , FS.CIS_TYPE
	     , FS.REGULATORY_STATUS
	     , FS.AUTHORISED_FUND_TYPE
	     , FS.UCITS_VERSION
	     , FS.PURCHASE_SETTLEMENT_DAYS
	     , FS.REPURCHASE_SETTLEMENT_DAYS
	     , FS.DEALING_FREQUENCY
	     , FS.PRICING_FREQUENCY
	     , FS.VALUATION_TIME
	     , FS.FUND_DOMICILE
	     , FS.FUND_OBJECTIVE
	     , FS.BENEFICIAL_OWNER
	     , FS.ISSUING_GROUP
	     , FS.ISSUING_GROUP_ADDRESS
	     , FS.ISSUING_GROUP_POSTCODE
	     , FS.ISSUING_GROUP_PHONE_NUMBER
	     , FS.ISSUING_GROUP_WEBSITE
	     , FS.ISSUING_GROUP_LEI
	     , FS.TRUSTEE
	     , FS.TRUSTEE_LEI
	     , FS.CUSTODIAN
	     , FS.CUSTODIAN_LEI
	     , FS.CUSTODIAN_DOMICILE
	     , FS.REGISTERED_HOLDER
	     , FS.REGISTERED_HOLDER_ADDRESS
	     , FS.ADMINISTRATOR
	     , FS.ADMINISTRATOR_LEI
	     , FS.ADMINISTRATOR_DOMICILE
	     , FS.AUDITOR
	     , FS.AUDITOR_LEI
	     , FS.AUDITOR_DOMICILE
	     , FS.LOAD_DATETIME
);
create or replace view IM_VAULT.BDV.FUND_NAV_SAT(
	FUND_HKEY,
	FUND_BKEY,
	BUSINESS_DATE,
	NAV_CALC_DATE,
	NET_ASSET_VALUE,
	NAV_PER_SHARE,
	NET_CAPSTOCK_SHARES_OUTSTANDING,
	LOAD_DATETIME
) COMMENT='NO COMMENT PROVIDED'
 as (
WITH FSNS_L AS(
SELECT FUND_HKEY, NAV_DATE, BUSINESS_DATE, LAST_VALUE(LOAD_DATETIME) OVER (PARTITION BY FUND_HKEY, NAV_DATE, BUSINESS_DATE ORDER BY LOAD_DATETIME) AS LOAD_DATETIME
FROM "IM_VAULT"."RDV"."FUND_SSB_NAV_SAT"
)
, FUND_NAV_SAT AS (
SELECT FH2.FUND_HKEY, FH2.FUND_BKEY
      ,TO_DATE(FSNS.BUSINESS_DATE, 'YYYY-MM-DD') AS BUSINESS_DATE
      ,TO_DATE(FSNS.NAV_DATE, 'YYYYMMDD') AS NAV_CALC_DATE
      ,TO_NUMERIC(FSNS.NET_ASSET, 38, 2) as NET_ASSET_VALUE
      ,TO_NUMERIC(FSNS.NAV, 38, 4) as NAV_PER_SHARE
      ,TO_NUMERIC(FSNS.NET_SHARES_OUTST, 38, 3) as NET_CAPSTOCK_SHARES_OUTSTANDING
      ,FSNS.LOAD_DATETIME
FROM "IM_VAULT"."RDV"."FUND_SSB_NAV_SAT" FSNS
INNER JOIN FSNS_L
ON FSNS.FUND_HKEY = FSNS_L.FUND_HKEY
AND FSNS.NAV_DATE = FSNS_L.NAV_DATE
AND FSNS.BUSINESS_DATE = FSNS_L.BUSINESS_DATE
AND FSNS.LOAD_DATETIME = FSNS_L.LOAD_DATETIME 
INNER JOIN "IM_VAULT"."RDV"."FUND_HUB" FH
ON FH.FUND_HKEY = FSNS.FUND_HKEY
INNER JOIN "IM_VAULT"."RDV"."FUND_SAL" FSAL
ON FSAL.DUPLICATE_FUND_HKEY = FH.FUND_HKEY 
INNER JOIN "IM_VAULT"."RDV"."FUND_HUB" FH2
ON FSAL.MASTER_FUND_HKEY = FH2.FUND_HKEY
)
, OVR_RECORDS AS (
    SELECT *
    FROM (
        SELECT TRIM(OL.H_KEY) AS "H_KEY",
               TRIM(OL.BUSINESS_DATE) AS "BUSINESS_DATE",
               TRIM(OL.ATTRIBUTE_NAME) AS "ATTRIBUTE_NAME",
               OL.ATTRIBUTE_VALUE,
               TRIM(OL.LOAD_DATETIME) AS "LOAD_DATETIME",
               ROW_NUMBER() OVER (PARTITION BY OL.H_KEY, OL.BUSINESS_DATE, OL.ATTRIBUTE_NAME
                                  ORDER BY OL.LOAD_DATETIME DESC) AS "DECLARED_RANK"
        FROM IM_VAULT.REFERENCE.OVERRIDE_LOOKUP OL)
    WHERE "DECLARED_RANK" = '1'
)
SELECT  FNS.FUND_HKEY
        , FNS.FUND_BKEY
        , FNS.BUSINESS_DATE
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'NAV_CALC_DATE'
                       THEN OL.ATTRIBUTE_VALUE END), FNS.NAV_CALC_DATE
                  ) AS "NAV_CALC_DATE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'NET_ASSET_VALUE'
                       THEN OL.ATTRIBUTE_VALUE END), FNS.NET_ASSET_VALUE
                  ) AS "NET_ASSET_VALUE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'NAV_PER_SHARE'
                       THEN OL.ATTRIBUTE_VALUE END), FNS.NAV_PER_SHARE
                  ) AS "NAV_PER_SHARE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'NET_CAPSTOCK_SHARES_OUTSTANDING'
                       THEN OL.ATTRIBUTE_VALUE END), FNS.NET_CAPSTOCK_SHARES_OUTSTANDING
                  ) AS "NET_CAPSTOCK_SHARES_OUTSTANDING"
        , FNS.LOAD_DATETIME
FROM FUND_NAV_SAT FNS
LEFT JOIN OVR_RECORDS OL ON OL.H_KEY = FNS.FUND_HKEY AND
                            (OL.BUSINESS_DATE = FNS.BUSINESS_DATE) AND
                            OL.ATTRIBUTE_NAME IN ('NAV_CALC_DATE'
                                                  , 'NET_ASSET_VALUE'
                                                  , 'NAV_PER_SHARE'
                                                  , 'NET_CAPSTOCK_SHARES_OUTSTANDING') AND
                                                  OL.LOAD_DATETIME > FNS.LOAD_DATETIME
GROUP BY FNS.FUND_HKEY
         , FNS.FUND_BKEY
         , FNS.BUSINESS_DATE
         , FNS.NAV_CALC_DATE
         , FNS.NET_ASSET_VALUE
         , FNS.NAV_PER_SHARE
         , FNS.NET_CAPSTOCK_SHARES_OUTSTANDING
         , FNS.LOAD_DATETIME
);
create or replace view IM_VAULT.BDV.FUND_CLASS_SRRI_SAT(
	FUND_CLASS_HKEY,
	FUND_CLASS_BKEY,
	VOLATILITY_DATE,
	SRRI,
	LOAD_DATETIME
) COMMENT='NO COMMENT PROVIDED'
 as
(
WITH FUND_SRRI AS (
SELECT FUND_CLASS_HKEY,
       FUND_CLASS_BKEY, 
       VOLALTILITY_DATE
       , CASE WHEN VOLATILITY_5Y < 0.005
                    THEN 1
              WHEN VOLATILITY_5Y >= 0.005 AND VOLATILITY_5Y <0.02
                    THEN 2
              WHEN VOLATILITY_5Y >= 0.02 AND VOLATILITY_5Y <0.05
                    THEN 3
              WHEN VOLATILITY_5Y >= 0.05 AND VOLATILITY_5Y <0.1
                    THEN 4
              WHEN VOLATILITY_5Y >= 0.1 AND VOLATILITY_5Y <0.15
                    THEN 5
              WHEN VOLATILITY_5Y >= 0.15 AND VOLATILITY_5Y <0.25
                    THEN 6
              WHEN VOLATILITY_5Y > 0.25
                    THEN 7
        END AS SRRI
       , FVVS.LOAD_DATETIME
FROM "IM_VAULT".BDV."FUND_CLASS_VOLATILITY_SAT" FVVS
WHERE DAYOFWEEK(VOLALTILITY_DATE) = 5
AND VOLATILITY_5Y IS NOT NULL
)
, OVR_RECORDS AS (
    SELECT *
    FROM (
        SELECT TRIM(OL.H_KEY) AS "H_KEY",
               TRIM(OL.BUSINESS_DATE) AS "BUSINESS_DATE",
               TRIM(OL.ATTRIBUTE_NAME) AS "ATTRIBUTE_NAME",
               OL.ATTRIBUTE_VALUE,
               TRIM(OL.LOAD_DATETIME) AS "LOAD_DATETIME",
               ROW_NUMBER() OVER (PARTITION BY OL.H_KEY, OL.BUSINESS_DATE, OL.ATTRIBUTE_NAME
                                  ORDER BY OL.LOAD_DATETIME DESC) AS "DECLARED_RANK"
        FROM IM_VAULT.REFERENCE.OVERRIDE_LOOKUP OL)
    WHERE "DECLARED_RANK" = '1'
)
SELECT  FS.FUND_CLASS_HKEY
        , FS.FUND_CLASS_BKEY
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'VOLATILITY_DATE'
                       THEN OL.ATTRIBUTE_VALUE END), FS.VOLALTILITY_DATE
                  ) AS "VOLATILITY_DATE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'SRRI'
                       THEN OL.ATTRIBUTE_VALUE END), FS.SRRI
                  ) AS "SRRI"
        , FS.LOAD_DATETIME
FROM FUND_SRRI FS
LEFT JOIN OVR_RECORDS OL ON OL.H_KEY = FS.FUND_CLASS_HKEY AND
                            (OL.BUSINESS_DATE = FS.VOLALTILITY_DATE) AND
                            OL.ATTRIBUTE_NAME IN ('VOLATILITY_DATE'
                                                  , 'SRRI') AND
                                                  OL.LOAD_DATETIME > FS.LOAD_DATETIME
GROUP BY FS.FUND_CLASS_HKEY
         , FS.FUND_CLASS_BKEY
         , FS.VOLALTILITY_DATE
         , FS.SRRI
         , FS.LOAD_DATETIME
);
create or replace view IM_VAULT.BDV.FUND_CLASS_PERFORMANCE_SAT(
	FUND_CLASS_HKEY,
	FUND_CLASS_BKEY,
	PERF_DATE,
	ABS_PERF_DAILY,
	ABS_PERF_WEEKLY,
	ABS_PERF_M1,
	ABS_PERF_M3,
	ABS_PERF_M6,
	ABS_PERF_Y1,
	ABS_PERF_Y3,
	ABS_PERF_Y5,
	ABS_PERF_Y7,
	ABS_PERF_Y10,
	ABS_PERF_INCEPTION,
	LOAD_DATETIME
) COMMENT='NO COMMENT PROVIDED'
 as (
WITH FV_HUB AS(
SELECT FVH.*
FROM "IM_VAULT"."RDV"."FUND_CLASS_HUB" FVH
INNER JOIN (SELECT FUND_CLASS_HKEY, LAST_VALUE(LOAD_DATETIME) OVER (PARTITION BY FUND_CLASS_HKEY ORDER BY LOAD_DATETIME) AS LOAD_DATETIME
            FROM "IM_VAULT"."RDV"."FUND_CLASS_HUB") A
ON FVH.FUND_CLASS_HKEY = A.FUND_CLASS_HKEY
AND FVH.LOAD_DATETIME = A.LOAD_DATETIME
)
, FV_SAL AS(
SELECT FVSAL.*
FROM "IM_VAULT"."RDV"."FUND_CLASS_SAL" FVSAL
INNER JOIN (SELECT SAL_FUND_CLASS_HASH_KEY, LAST_VALUE(LOAD_DATETIME) OVER (PARTITION BY SAL_FUND_CLASS_HASH_KEY ORDER BY LOAD_DATETIME) AS LOAD_DATETIME
            FROM "IM_VAULT"."RDV"."FUND_CLASS_SAL") A
ON FVSAL.SAL_FUND_CLASS_HASH_KEY = A.SAL_FUND_CLASS_HASH_KEY
AND FVSAL.LOAD_DATETIME = A.LOAD_DATETIME
)
, FC_PERFORMANCE AS(
SELECT    FH2.FUND_CLASS_HKEY
         ,FH2.FUND_CLASS_BKEY
         ,TO_DATE(FVPS.PRICE_DATE) AS PERF_DATE
--         ,LAG(FVPS.PRICE,DATE_TRUNC('YEAR', TO_DATE(FVPS.PRICE_DATE)), DATEDIFF(DAYS,DATE_TRUNC('YEAR', TO_DATE(FVPS.PRICE_DATE)),TO_DATE(FVPS.PRICE_DATE))) OVER (PARTITION BY FVPS.CITICODE ORDER BY FVPS.PRICE_DATE)
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,1) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_DAILY
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,7) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_WEEKLY   
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,30) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_M1
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,90) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_M3
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,120) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_M6
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,365) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_Y1
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,1095) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_Y3
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,1825) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_Y5
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,2555) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_Y7
         ,TO_DECIMAL((FVPS.PRICE / LAG(FVPS.PRICE,3650) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_Y10
         ,TO_DECIMAL((FVPS.PRICE / FIRST_VALUE(FVPS.PRICE) OVER (PARTITION BY FVPS.FUND_CLASS_HKEY ORDER BY FVPS.PRICE_DATE)) -1, 38,12) AS ABS_PERF_INCEPTION
         ,TO_DATE(FVPS.LOAD_DATETIME) AS LOAD_DATETIME
  FROM IM_VAULT.RDV.FUND_CLASS_FE_PRICE_SAT FVPS
  INNER JOIN FV_HUB FH
      ON FVPS.FUND_CLASS_HKEY = FH.FUND_CLASS_HKEY
  INNER JOIN FV_SAL FVS
      ON FVS.DUPLICATE_FUND_CLASS_HKEY = FH.FUND_CLASS_HKEY
  INNER JOIN FV_HUB FH2
      ON FH2.FUND_CLASS_HKEY = FVS.MASTER_FUND_CLASS_HKEY
)
, OVR_RECORDS AS (
    SELECT *
    FROM (
        SELECT TRIM(OL.H_KEY) AS "H_KEY",
               TRIM(OL.BUSINESS_DATE) AS "BUSINESS_DATE",
               TRIM(OL.ATTRIBUTE_NAME) AS "ATTRIBUTE_NAME",
               OL.ATTRIBUTE_VALUE,
               TRIM(OL.LOAD_DATETIME) AS "LOAD_DATETIME",
               ROW_NUMBER() OVER (PARTITION BY OL.H_KEY, OL.BUSINESS_DATE, OL.ATTRIBUTE_NAME
                                  ORDER BY OL.LOAD_DATETIME DESC) AS "DECLARED_RANK"
        FROM IM_VAULT.REFERENCE.OVERRIDE_LOOKUP OL)
    WHERE "DECLARED_RANK" = '1'
)
SELECT  FUND_CLASS_HKEY,
        FUND_CLASS_BKEY,
        PERF_DATE,
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_DAILY'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_DAILY
                ) AS "ABS_PERF_DAILY",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_WEEKLY'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_WEEKLY
                ) AS "ABS_PERF_WEEKLY",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_M1'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_M1
                ) AS "ABS_PERF_M1",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_M3'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_M3
                ) AS "ABS_PERF_M3",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_M6'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_M6
                ) AS "ABS_PERF_M6",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_Y1'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_Y1
                ) AS "ABS_PERF_Y1",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_Y3'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_Y3
                ) AS "ABS_PERF_Y3",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_Y5'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_Y5
                ) AS "ABS_PERF_Y5",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_Y7'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_Y7
                ) AS "ABS_PERF_Y7",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_Y10'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_Y10
                ) AS "ABS_PERF_Y10",
        COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'ABS_PERF_INCEPTION'
                     THEN OL.ATTRIBUTE_VALUE END), FCSPS.ABS_PERF_INCEPTION
                ) AS "ABS_PERF_INCEPTION",
        FCSPS.LOAD_DATETIME
FROM FC_PERFORMANCE FCSPS
LEFT JOIN OVR_RECORDS OL ON OL.H_KEY = FCSPS.FUND_CLASS_HKEY AND
                            OL.BUSINESS_DATE = FCSPS.PERF_DATE AND
                            OL.ATTRIBUTE_NAME IN ('ABS_PERF_DAILY',
                                                  'ABS_PERF_WEEKLY',
                                                  'ABS_PERF_M1',
                                                  'ABS_PERF_M3',
                                                  'ABS_PERF_M6',
                                                  'ABS_PERF_Y1',
                                                  'ABS_PERF_Y3',
                                                  'ABS_PERF_Y5',
                                                  'ABS_PERF_Y7',
                                                  'ABS_PERF_Y10',
                                                  'ABS_PERF_INCEPTION') AND
                                                  OL.LOAD_DATETIME > FCSPS.LOAD_DATETIME
GROUP BY FCSPS.FUND_CLASS_HKEY, 
         FCSPS.FUND_CLASS_BKEY, 
         FCSPS.PERF_DATE, 
         FCSPS.ABS_PERF_DAILY,
         FCSPS.ABS_PERF_WEEKLY,
         FCSPS.ABS_PERF_M1,
         FCSPS.ABS_PERF_M3,
         FCSPS.ABS_PERF_M6,
         FCSPS.ABS_PERF_Y1,
         FCSPS.ABS_PERF_Y3,
         FCSPS.ABS_PERF_Y5,
         FCSPS.ABS_PERF_Y7,
         FCSPS.ABS_PERF_Y10,
         FCSPS.ABS_PERF_INCEPTION,
         FCSPS.LOAD_DATETIME
ORDER BY FUND_CLASS_HKEY
);
create or replace view IM_VAULT.BDV.FUND_CLASS_PRICE_SAT(
	FUND_CLASS_HKEY,
	FUND_CLASS_BKEY,
	PRICE_DATE,
	BID_PRICE,
	DAILY_PRICE_CHANGE,
	LOAD_DATETIME
) COMMENT='NO COMMENT PROVIDED'
 as (
WITH FV_HUB AS(
SELECT FVH.*
FROM "IM_VAULT"."RDV"."FUND_CLASS_HUB" FVH
INNER JOIN (SELECT FUND_CLASS_HKEY, LAST_VALUE(LOAD_DATETIME) OVER (PARTITION BY FUND_CLASS_HKEY ORDER BY LOAD_DATETIME) AS LOAD_DATETIME
            FROM "IM_VAULT"."RDV"."FUND_CLASS_HUB") A
ON FVH.FUND_CLASS_HKEY = A.FUND_CLASS_HKEY
AND FVH.LOAD_DATETIME = A.LOAD_DATETIME
)
, FV_SAL AS(
SELECT FVSAL.*
FROM "IM_VAULT"."RDV"."FUND_CLASS_SAL" FVSAL
INNER JOIN (SELECT SAL_FUND_CLASS_HASH_KEY, LAST_VALUE(LOAD_DATETIME) OVER (PARTITION BY SAL_FUND_CLASS_HASH_KEY ORDER BY LOAD_DATETIME) AS LOAD_DATETIME
            FROM "IM_VAULT"."RDV"."FUND_CLASS_SAL") A
ON FVSAL.SAL_FUND_CLASS_HASH_KEY = A.SAL_FUND_CLASS_HASH_KEY
AND FVSAL.LOAD_DATETIME = A.LOAD_DATETIME)
, FC_PRICE AS(
SELECT    FH2.FUND_CLASS_HKEY
         ,FH2.FUND_CLASS_BKEY
         ,TO_DATE(FVPS.PRICE_DATE) AS PRICE_DATE
         ,TO_NUMERIC(FVPS.PRICE,10,6) AS BID_PRICE
         ,TO_NUMERIC(FVPS.PRICE - FVPS2.PRICE,10,6) AS DAILY_PRICE_CHANGE
         ,TO_DATE(FVPS.LOAD_DATETIME) AS LOAD_DATETIME
  FROM IM_VAULT.RDV.FUND_CLASS_FE_PRICE_SAT FVPS
  INNER JOIN FV_HUB FH
      ON FVPS.FUND_CLASS_HKEY = FH.FUND_CLASS_HKEY
  INNER JOIN FV_SAL FVS
      ON FVS.DUPLICATE_FUND_CLASS_HKEY = FH.FUND_CLASS_HKEY
  INNER JOIN FV_HUB FH2
      ON FH2.FUND_CLASS_HKEY = FVS.MASTER_FUND_CLASS_HKEY
  INNER JOIN IM_VAULT.RDV.FUND_CLASS_FE_PRICE_SAT FVPS2
      ON FVPS.FUND_CLASS_HKEY = FVPS2.FUND_CLASS_HKEY
      AND FVPS2.PRICE_DATE = TO_DATE(DATEADD(DAY,-1,FVPS.PRICE_DATE))
)
, OVR_RECORDS AS (
    SELECT *
    FROM (
        SELECT TRIM(OL.H_KEY) AS "H_KEY",
               TRIM(OL.BUSINESS_DATE) AS "BUSINESS_DATE",
               TRIM(OL.ATTRIBUTE_NAME) AS "ATTRIBUTE_NAME",
               OL.ATTRIBUTE_VALUE,
               TRIM(OL.LOAD_DATETIME) AS "LOAD_DATETIME",
               ROW_NUMBER() OVER (PARTITION BY OL.H_KEY, OL.BUSINESS_DATE, OL.ATTRIBUTE_NAME
                                  ORDER BY OL.LOAD_DATETIME DESC) AS "DECLARED_RANK"
        FROM IM_VAULT.REFERENCE.OVERRIDE_LOOKUP OL)
    WHERE "DECLARED_RANK" = '1'
)
SELECT FCPS.FUND_CLASS_HKEY
       , FCPS.FUND_CLASS_BKEY
       , FCPS.PRICE_DATE
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'BID_PRICE'
                      THEN OL.ATTRIBUTE_VALUE END), FCPS.BID_PRICE
                 ) AS "BID_PRICE"
       , COALESCE(MAX(CASE
                     WHEN OL.ATTRIBUTE_NAME = 'DAILY_PRICE_CHANGE'
                     THEN OL.ATTRIBUTE_VALUE END), FCPS.DAILY_PRICE_CHANGE
                 ) AS "DAILY_PRICE_CHANGE"
       , FCPS.LOAD_DATETIME
FROM FC_PRICE FCPS
LEFT JOIN OVR_RECORDS OL ON OL.H_KEY = FCPS.FUND_CLASS_HKEY AND
                            OL.BUSINESS_DATE = FCPS.PRICE_DATE AND
                            OL.ATTRIBUTE_NAME IN (  'BID_PRICE'
                                                  , 'DAILY_PRICE_CHANGE') AND
                                                  OL.LOAD_DATETIME > FCPS.LOAD_DATETIME
GROUP BY FCPS.FUND_CLASS_HKEY
         , FCPS.FUND_CLASS_BKEY
         , FCPS.PRICE_DATE
         , FCPS.BID_PRICE
         , FCPS.DAILY_PRICE_CHANGE
         , FCPS.LOAD_DATETIME
);
create or replace view IM_VAULT.BDV.FUND_CLASS_SAT(
	FUND_CLASS_HKEY,
	FUND_CLASS_BKEY,
	TO_DATE,
	FROM_DATE,
	FUND_CLASS_NAME,
	SHARE_CLASS,
	UNIT_TYPE,
	CURRENCY_ISO,
	CURRENCY_HEDGED_IND,
	ASIA_CLASS_IND,
	DATE_LAUNCHED,
	DATE_CLOSED,
	SEDOL,
	ISIN,
	MEXID,
	CITICODE,
	LOAD_DATETIME
) COMMENT='NO COMMENT PROVIDED'
 as
(
WITH FC_SAT AS(
  SELECT FUND_CLASS_HKEY
        ,FUND_CLASS_BKEY
        ,TRY_TO_DATE(BUS_DATE::VARCHAR,'DD/MM/YYYY') AS FROM_DATE
        ,TRY_TO_DATE(lag(bus_date) OVER (PARTITION BY fund_class_hkey ORDER BY bus_date desc)::VARCHAR,'DD/MM/YYYY') AS TO_DATE
        ,TO_CHAR(FUND_CLASS_NAME ) AS FUND_CLASS_NAME
        ,TO_CHAR(SHARE_CLASS) AS SHARE_CLASS
        ,TO_CHAR(UNIT_TYPE) AS UNIT_TYPE
        ,TO_CHAR(CURRENCY) AS CURRENCY_ISO
        ,CURRENCY_HEDGED_IND
        ,ASIA_CLASS_IND
        ,TRY_TO_DATE(DATE_LAUNCHED::VARCHAR,'DD/MM/YYYY') AS DATE_LAUNCHED
        ,TRY_TO_DATE(DATE_CLOSED::VARCHAR,'DD/MM/YYYY') AS DATE_CLOSED
        ,TO_CHAR(SEDOL) AS SEDOL
        ,TO_CHAR(ISIN) AS ISIN
        ,TO_CHAR(MEXID) AS MEXID
        ,TO_CHAR(CITICODE) AS CITICODE
        ,TO_DATE(LOAD_DATETIME) AS LOAD_DATETIME
  FROM IM_VAULT.RDV.FUND_CLASS_SAT
)
, OVR_RECORDS AS (
    SELECT *
    FROM (
        SELECT TRIM(OL.H_KEY) AS "H_KEY",
               TRIM(OL.BUSINESS_DATE) AS "BUSINESS_DATE",
               TRIM(OL.ATTRIBUTE_NAME) AS "ATTRIBUTE_NAME",
               OL.ATTRIBUTE_VALUE,
               TRIM(OL.LOAD_DATETIME) AS "LOAD_DATETIME",
               ROW_NUMBER() OVER (PARTITION BY OL.H_KEY, OL.BUSINESS_DATE, OL.ATTRIBUTE_NAME
                                  ORDER BY OL.LOAD_DATETIME DESC) AS "DECLARED_RANK"
        FROM IM_VAULT.REFERENCE.OVERRIDE_LOOKUP OL)
    WHERE "DECLARED_RANK" = '1'
)
SELECT FCS.FUND_CLASS_HKEY
       , FCS.FUND_CLASS_BKEY
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'TO_DATE'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.TO_DATE
                 ) AS "TO_DATE"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'FROM_DATE'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.FROM_DATE
                 ) AS "FROM_DATE"          
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'FUND_CLASS_NAME'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.FUND_CLASS_NAME
                 ) AS "FCS.FUND_CLASS_NAME"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'SHARE_CLASS'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.SHARE_CLASS
                 ) AS "SHARE_CLASS"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'UNIT_TYPE'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.UNIT_TYPE
                 ) AS "UNIT_TYPE"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'CURRENCY_ISO'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.CURRENCY_ISO
                 ) AS "CURRENCY_ISO"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'CURRENCY_HEDGED_IND'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.CURRENCY_HEDGED_IND
                 ) AS "CURRENCY_HEDGED_IND"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'ASIA_CLASS_IND'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.ASIA_CLASS_IND
                 ) AS "ASIA_CLASS_IND"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'DATE_LAUNCHED'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.DATE_LAUNCHED
                 ) AS "DATE_LAUNCHED"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'DATE_CLOSED'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.DATE_CLOSED
                 ) AS "DATE_CLOSED"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'SEDOL'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.SEDOL
                 ) AS "SEDOL"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'ISIN'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.ISIN
                 ) AS "ISIN"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'MEXID'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.MEXID
                 ) AS "MEXID"
       , COALESCE(MAX(CASE
                      WHEN OL.ATTRIBUTE_NAME = 'CITICODE'
                      THEN OL.ATTRIBUTE_VALUE END), FCS.CITICODE
                 ) AS "CITICODE"
       , FCS.LOAD_DATETIME
FROM FC_SAT FCS
LEFT JOIN OVR_RECORDS OL ON OL.H_KEY = FCS.FUND_CLASS_HKEY AND
                            (OL.BUSINESS_DATE = FCS.TO_DATE OR OL.BUSINESS_DATE = FCS.FROM_DATE) AND
                            OL.ATTRIBUTE_NAME IN (  'TO_DATE'
                                                  , 'FROM_DATE'
                                                  , 'FUND_CLASS_NAME'
                                                  , 'SHARE_CLASS'
                                                  , 'UNIT_TYPE'
                                                  , 'CURRENCY_ISO'
                                                  , 'CURRENY_HEDGED_IND'
                                                  , 'ASIA_CLASS_IND'
                                                  , 'DATE_LAUNCHED'
                                                  , 'SEDOL'
                                                  , 'ISIN'
                                                  , 'MEXID'
                                                  , 'CITICODE') AND
                                                  OL.LOAD_DATETIME > FCS.LOAD_DATETIME
GROUP BY FCS.FUND_CLASS_HKEY
       , FCS.FUND_CLASS_BKEY
       , FCS.TO_DATE
       , FCS.FROM_DATE
       , FCS.FUND_CLASS_NAME
       , FCS.SHARE_CLASS
       , FCS.UNIT_TYPE
       , FCS.CURRENCY_ISO
       , FCS.CURRENCY_HEDGED_IND
       , FCS.ASIA_CLASS_IND
       , FCS.DATE_LAUNCHED
       , FCS.DATE_CLOSED
       , FCS.SEDOL
       , FCS.ISIN
       , FCS.MEXID
       , FCS.CITICODE
       , FCS.LOAD_DATETIME
);
create or replace view IM_VAULT.BDV.MODEL_PORTFOLIO_WEIGHTS_SAT(
	LNK_MODEL_PORTFOLIO_WEIGHTS_HKEY,
	FROM_DATE,
	TO_DATE,
	PORTFOLIO_ID,
	FUND_ID,
	FUND_WEIGHT,
	LOAD_DATETIME
) COMMENT='NO COMMENT PROVIDED'
 as
(
  -- PLEASE TYPE VIEW DEFINITION HERE
 WITH PWSAT AS (SELECT PWSAT.*
               FROM "IM_VAULT"."RDV"."MODEL_PORTFOLIO_WEIGHTS_SAT" PWSAT
               INNER JOIN (SELECT LNK_MODEL_PORTFOLIO_WEIGHTS_HKEY, BUS_DATE, LAST_VALUE(LOAD_DATETIME) 
                           OVER (PARTITION BY LNK_MODEL_PORTFOLIO_WEIGHTS_HKEY, BUS_DATE ORDER BY LOAD_DATETIME) AS LOAD_DATETIME
               FROM "IM_VAULT"."RDV"."MODEL_PORTFOLIO_WEIGHTS_SAT") A
               ON PWSAT.LNK_MODEL_PORTFOLIO_WEIGHTS_HKEY = A.LNK_MODEL_PORTFOLIO_WEIGHTS_HKEY
               AND PWSAT.BUS_DATE = A.BUS_DATE
               AND PWSAT.LOAD_DATETIME = A.LOAD_DATETIME)
       ,PED AS(SELECT  BUS_DATE
                   ,PORTFOLIO_KEY
                   ,IFNULL(TRY_TO_DATE(LAG(PWSAT.BUS_DATE) OVER (PARTITION BY PWSAT.PORTFOLIO_KEY ORDER BY TO_DATE(PWSAT.BUS_DATE::VARCHAR,'DD/MM/YYYY') DESC)::VARCHAR,'DD/MM/YYYY')-1,'9999-12-31') AS END_DATE
            FROM "IM_VAULT"."RDV"."MODEL_PORTFOLIO_WEIGHTS_SAT" PWSAT
            GROUP BY BUS_DATE, PORTFOLIO_KEY)
, MODEL_PORTFOLIO_WEIGHTS AS(
SELECT PWSAT.LNK_MODEL_PORTFOLIO_WEIGHTS_HKEY
      ,TRY_TO_DATE(PWSAT.BUS_DATE::VARCHAR,'DD/MM/YYYY') AS FROM_DATE
      ,PED.END_DATE AS TO_DATE
      ,CAST(PWSAT.PORTFOLIO_KEY AS VARCHAR(500)) AS PORTFOLIO_ID
      ,CAST(PWSAT.FUND_GROUP_KEY AS VARCHAR(500)) AS FUND_ID
      ,CAST(PWSAT.WEIGHTING AS DECIMAL(9,2)) AS FUND_WEIGHT
      ,PWSAT.LOAD_DATETIME
FROM PWSAT
INNER JOIN (SELECT PORTFOLIO_KEY, MAX(TRY_TO_DATE(BUS_DATE::VARCHAR,'DD/MM/YYYY')) AS BUS_DATE FROM "IM_VAULT"."RDV"."MODEL_PORTFOLIO_WEIGHTS_SAT" GROUP BY PORTFOLIO_KEY) MD
ON MD.PORTFOLIO_KEY = PWSAT.PORTFOLIO_KEY
INNER JOIN PED
ON PED.PORTFOLIO_KEY = PWSAT.PORTFOLIO_KEY
AND PED.BUS_DATE = PWSAT.BUS_DATE
)
, OVR_RECORDS AS (
    SELECT *
    FROM (
        SELECT TRIM(OL.H_KEY) AS "H_KEY",
               TRIM(OL.BUSINESS_DATE) AS "BUSINESS_DATE",
               TRIM(OL.ATTRIBUTE_NAME) AS "ATTRIBUTE_NAME",
               OL.ATTRIBUTE_VALUE,
               TRIM(OL.LOAD_DATETIME) AS "LOAD_DATETIME",
               ROW_NUMBER() OVER (PARTITION BY OL.H_KEY, OL.BUSINESS_DATE, OL.ATTRIBUTE_NAME
                                  ORDER BY OL.LOAD_DATETIME DESC) AS "DECLARED_RANK"
        FROM IM_VAULT.REFERENCE.OVERRIDE_LOOKUP OL)
    WHERE "DECLARED_RANK" = '1'
)
SELECT  LNK_MODEL_PORTFOLIO_WEIGHTS_HKEY
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FROM_DATE'
                       THEN OL.ATTRIBUTE_VALUE END), MPW.FROM_DATE
                  ) AS "FROM_DATE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'TO_DATE'
                       THEN OL.ATTRIBUTE_VALUE END), MPW.TO_DATE
                  ) AS "TO_DATE"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'PORTFOLIO_ID'
                       THEN OL.ATTRIBUTE_VALUE END), MPW.PORTFOLIO_ID
                  ) AS "PORTFOLIO_ID"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_ID'
                       THEN OL.ATTRIBUTE_VALUE END), MPW.FUND_ID
                  ) AS "FUND_ID"
        , COALESCE(MAX(CASE
                       WHEN OL.ATTRIBUTE_NAME = 'FUND_WEIGHT'
                       THEN OL.ATTRIBUTE_VALUE END), MPW.FUND_WEIGHT
                  ) AS "FUND_WEIGHT"
        , MPW.LOAD_DATETIME
FROM MODEL_PORTFOLIO_WEIGHTS MPW
LEFT JOIN OVR_RECORDS OL ON OL.H_KEY = MPW.LNK_MODEL_PORTFOLIO_WEIGHTS_HKEY AND
                            (OL.BUSINESS_DATE = MPW.TO_DATE OR OL.BUSINESS_DATE = MPW.FROM_DATE) AND
                            OL.ATTRIBUTE_NAME IN ('FROM_DATE'
                                                  , 'TO_DATE'
                                                  , 'PORTFOLIO_ID'
                                                  , 'FUND_ID'
                                                  , 'FUND_WEIGHT') AND
                                                  OL.LOAD_DATETIME > MPW.LOAD_DATETIME
GROUP BY MPW.LNK_MODEL_PORTFOLIO_WEIGHTS_HKEY
         , MPW.FROM_DATE
         , MPW.TO_DATE
         , MPW.PORTFOLIO_ID
         , MPW.FUND_ID
         , MPW.FUND_WEIGHT
         , MPW.LOAD_DATETIME
);